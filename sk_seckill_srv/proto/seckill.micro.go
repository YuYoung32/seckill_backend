// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/seckill.proto

/*
Package seckill is a generated protocol buffer package.

It is generated from these files:
	proto/seckill.proto

It has these top-level messages:
	GeneralRequest
	GeneralResponse
	SeckillRequest
*/
package seckill

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SeckillService service

type SeckillService interface {
	FrontSeckill(ctx context.Context, in *SeckillRequest, opts ...client.CallOption) (*GeneralResponse, error)
}

type seckillService struct {
	c    client.Client
	name string
}

func NewSeckillService(name string, c client.Client) SeckillService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "seckill"
	}
	return &seckillService{
		c:    c,
		name: name,
	}
}

func (c *seckillService) FrontSeckill(ctx context.Context, in *SeckillRequest, opts ...client.CallOption) (*GeneralResponse, error) {
	req := c.c.NewRequest(c.name, "SeckillService.FrontSeckill", in)
	out := new(GeneralResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SeckillService service

type SeckillServiceHandler interface {
	FrontSeckill(context.Context, *SeckillRequest, *GeneralResponse) error
}

func RegisterSeckillServiceHandler(s server.Server, hdlr SeckillServiceHandler, opts ...server.HandlerOption) error {
	type seckillService interface {
		FrontSeckill(ctx context.Context, in *SeckillRequest, out *GeneralResponse) error
	}
	type SeckillService struct {
		seckillService
	}
	h := &seckillServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SeckillService{h}, opts...))
}

type seckillServiceHandler struct {
	SeckillServiceHandler
}

func (h *seckillServiceHandler) FrontSeckill(ctx context.Context, in *SeckillRequest, out *GeneralResponse) error {
	return h.SeckillServiceHandler.FrontSeckill(ctx, in, out)
}
