// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/event/event.proto

/*
Package event_proto is a generated protocol buffer package.

It is generated from these files:
	proto/event/event.proto

It has these top-level messages:
	EventInfo
	EventDetailedInfo
	ProductInfo
	FrontEventInfo
	GeneralRequest
	GeneralResponse
	AddEventRequest
	GetEventListRequest
	GetEventListResponse
	GetEventResponse
	EditEventRequest
	GetFrontEventListRequest
	GetFrontEventListResponse
	GetFrontEventResponse
*/
package event_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for EventService service

type EventService interface {
	AddEvent(ctx context.Context, in *AddEventRequest, opts ...client.CallOption) (*GeneralResponse, error)
	GetEventList(ctx context.Context, in *GetEventListRequest, opts ...client.CallOption) (*GetEventListResponse, error)
	GetEvent(ctx context.Context, in *GeneralRequest, opts ...client.CallOption) (*GetEventResponse, error)
	EditEvent(ctx context.Context, in *EditEventRequest, opts ...client.CallOption) (*GeneralResponse, error)
	DeleteEvent(ctx context.Context, in *GeneralRequest, opts ...client.CallOption) (*GeneralResponse, error)
	GetFrontEventList(ctx context.Context, in *GetFrontEventListRequest, opts ...client.CallOption) (*GetFrontEventListResponse, error)
	GetFrontEvent(ctx context.Context, in *GeneralRequest, opts ...client.CallOption) (*GetFrontEventResponse, error)
}

type eventService struct {
	c    client.Client
	name string
}

func NewEventService(name string, c client.Client) EventService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "event_proto"
	}
	return &eventService{
		c:    c,
		name: name,
	}
}

func (c *eventService) AddEvent(ctx context.Context, in *AddEventRequest, opts ...client.CallOption) (*GeneralResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.AddEvent", in)
	out := new(GeneralResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetEventList(ctx context.Context, in *GetEventListRequest, opts ...client.CallOption) (*GetEventListResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.GetEventList", in)
	out := new(GetEventListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetEvent(ctx context.Context, in *GeneralRequest, opts ...client.CallOption) (*GetEventResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.GetEvent", in)
	out := new(GetEventResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) EditEvent(ctx context.Context, in *EditEventRequest, opts ...client.CallOption) (*GeneralResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.EditEvent", in)
	out := new(GeneralResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) DeleteEvent(ctx context.Context, in *GeneralRequest, opts ...client.CallOption) (*GeneralResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.DeleteEvent", in)
	out := new(GeneralResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetFrontEventList(ctx context.Context, in *GetFrontEventListRequest, opts ...client.CallOption) (*GetFrontEventListResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.GetFrontEventList", in)
	out := new(GetFrontEventListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventService) GetFrontEvent(ctx context.Context, in *GeneralRequest, opts ...client.CallOption) (*GetFrontEventResponse, error) {
	req := c.c.NewRequest(c.name, "EventService.GetFrontEvent", in)
	out := new(GetFrontEventResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventService service

type EventServiceHandler interface {
	AddEvent(context.Context, *AddEventRequest, *GeneralResponse) error
	GetEventList(context.Context, *GetEventListRequest, *GetEventListResponse) error
	GetEvent(context.Context, *GeneralRequest, *GetEventResponse) error
	EditEvent(context.Context, *EditEventRequest, *GeneralResponse) error
	DeleteEvent(context.Context, *GeneralRequest, *GeneralResponse) error
	GetFrontEventList(context.Context, *GetFrontEventListRequest, *GetFrontEventListResponse) error
	GetFrontEvent(context.Context, *GeneralRequest, *GetFrontEventResponse) error
}

func RegisterEventServiceHandler(s server.Server, hdlr EventServiceHandler, opts ...server.HandlerOption) error {
	type eventService interface {
		AddEvent(ctx context.Context, in *AddEventRequest, out *GeneralResponse) error
		GetEventList(ctx context.Context, in *GetEventListRequest, out *GetEventListResponse) error
		GetEvent(ctx context.Context, in *GeneralRequest, out *GetEventResponse) error
		EditEvent(ctx context.Context, in *EditEventRequest, out *GeneralResponse) error
		DeleteEvent(ctx context.Context, in *GeneralRequest, out *GeneralResponse) error
		GetFrontEventList(ctx context.Context, in *GetFrontEventListRequest, out *GetFrontEventListResponse) error
		GetFrontEvent(ctx context.Context, in *GeneralRequest, out *GetFrontEventResponse) error
	}
	type EventService struct {
		eventService
	}
	h := &eventServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&EventService{h}, opts...))
}

type eventServiceHandler struct {
	EventServiceHandler
}

func (h *eventServiceHandler) AddEvent(ctx context.Context, in *AddEventRequest, out *GeneralResponse) error {
	return h.EventServiceHandler.AddEvent(ctx, in, out)
}

func (h *eventServiceHandler) GetEventList(ctx context.Context, in *GetEventListRequest, out *GetEventListResponse) error {
	return h.EventServiceHandler.GetEventList(ctx, in, out)
}

func (h *eventServiceHandler) GetEvent(ctx context.Context, in *GeneralRequest, out *GetEventResponse) error {
	return h.EventServiceHandler.GetEvent(ctx, in, out)
}

func (h *eventServiceHandler) EditEvent(ctx context.Context, in *EditEventRequest, out *GeneralResponse) error {
	return h.EventServiceHandler.EditEvent(ctx, in, out)
}

func (h *eventServiceHandler) DeleteEvent(ctx context.Context, in *GeneralRequest, out *GeneralResponse) error {
	return h.EventServiceHandler.DeleteEvent(ctx, in, out)
}

func (h *eventServiceHandler) GetFrontEventList(ctx context.Context, in *GetFrontEventListRequest, out *GetFrontEventListResponse) error {
	return h.EventServiceHandler.GetFrontEventList(ctx, in, out)
}

func (h *eventServiceHandler) GetFrontEvent(ctx context.Context, in *GeneralRequest, out *GetFrontEventResponse) error {
	return h.EventServiceHandler.GetFrontEvent(ctx, in, out)
}
